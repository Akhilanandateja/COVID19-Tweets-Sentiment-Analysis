{"cells":[{"cell_type":"code","source":["# Uninstall existing numpy, gensim, and scipy\n","!pip uninstall -y numpy gensim scipy\n","\n","# Install compatible versions\n","!pip install numpy==1.26.4 gensim==4.3.0 scipy==1.11.4\n","\n","# Note: After this cell runs, restart the runtime manually (Runtime -> Restart Runtime)\n","# Then proceed to the next cell\n","print(\"Please restart the runtime now (Runtime -> Restart Runtime) before continuing.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oRoPCn6gFktB","executionInfo":{"status":"ok","timestamp":1744778412460,"user_tz":-330,"elapsed":27678,"user":{"displayName":"SANGA AKHILANANDA TEJA","userId":"15554438447735276230"}},"outputId":"7c68db93-ed64-47c9-f4f3-01946ccde936"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Found existing installation: numpy 2.0.2\n","Uninstalling numpy-2.0.2:\n","  Successfully uninstalled numpy-2.0.2\n","\u001b[33mWARNING: Skipping gensim as it is not installed.\u001b[0m\u001b[33m\n","\u001b[0mFound existing installation: scipy 1.14.1\n","Uninstalling scipy-1.14.1:\n","  Successfully uninstalled scipy-1.14.1\n","Collecting numpy==1.26.4\n","  Downloading numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (61 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m61.0/61.0 kB\u001b[0m \u001b[31m1.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting gensim==4.3.0\n","  Downloading gensim-4.3.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (8.4 kB)\n","Collecting scipy==1.11.4\n","  Downloading scipy-1.11.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.4/60.4 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: smart-open>=1.8.1 in /usr/local/lib/python3.11/dist-packages (from gensim==4.3.0) (7.1.0)\n","Collecting FuzzyTM>=0.4.0 (from gensim==4.3.0)\n","  Downloading FuzzyTM-2.0.9-py3-none-any.whl.metadata (7.9 kB)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from FuzzyTM>=0.4.0->gensim==4.3.0) (2.2.2)\n","Collecting pyfume (from FuzzyTM>=0.4.0->gensim==4.3.0)\n","  Downloading pyFUME-0.3.4-py3-none-any.whl.metadata (9.7 kB)\n","Requirement already satisfied: wrapt in /usr/local/lib/python3.11/dist-packages (from smart-open>=1.8.1->gensim==4.3.0) (1.17.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->FuzzyTM>=0.4.0->gensim==4.3.0) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->FuzzyTM>=0.4.0->gensim==4.3.0) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->FuzzyTM>=0.4.0->gensim==4.3.0) (2025.2)\n","INFO: pip is looking at multiple versions of pyfume to determine which version is compatible with other requirements. This could take a while.\n","  Downloading pyFUME-0.3.1-py3-none-any.whl.metadata (9.7 kB)\n","Collecting simpful (from pyfume->FuzzyTM>=0.4.0->gensim==4.3.0)\n","  Downloading simpful-2.12.0-py3-none-any.whl.metadata (4.8 kB)\n","Collecting fst-pso (from pyfume->FuzzyTM>=0.4.0->gensim==4.3.0)\n","  Downloading fst-pso-1.8.1.tar.gz (18 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.11/dist-packages (from pyfume->FuzzyTM>=0.4.0->gensim==4.3.0) (4.13.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->FuzzyTM>=0.4.0->gensim==4.3.0) (1.17.0)\n","Collecting miniful (from fst-pso->pyfume->FuzzyTM>=0.4.0->gensim==4.3.0)\n","  Downloading miniful-0.0.6.tar.gz (2.8 kB)\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Downloading numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.3/18.3 MB\u001b[0m \u001b[31m33.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading gensim-4.3.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (24.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.1/24.1 MB\u001b[0m \u001b[31m19.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading scipy-1.11.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (36.4 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m36.4/36.4 MB\u001b[0m \u001b[31m8.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading FuzzyTM-2.0.9-py3-none-any.whl (31 kB)\n","Downloading pyFUME-0.3.1-py3-none-any.whl (59 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m59.6/59.6 kB\u001b[0m \u001b[31m4.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading simpful-2.12.0-py3-none-any.whl (24 kB)\n","Building wheels for collected packages: fst-pso, miniful\n","  Building wheel for fst-pso (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for fst-pso: filename=fst_pso-1.8.1-py3-none-any.whl size=20431 sha256=5f7eff31d6b682546f14d84365c1857ccc8a59d3c776a10bdd04cf949a52ae11\n","  Stored in directory: /root/.cache/pip/wheels/69/f5/e5/18ad53fe1ed6b2af9fad05ec052e4acbac8e92441df44bad2e\n","  Building wheel for miniful (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for miniful: filename=miniful-0.0.6-py3-none-any.whl size=3506 sha256=d7444ce018e7fcfdcf75d7cc863e9089ce6a148e34a980c29970d20669f8c794\n","  Stored in directory: /root/.cache/pip/wheels/9d/ff/2f/afe4cd56f47de147407705626517d68bea0f3b74eb1fb168e6\n","Successfully built fst-pso miniful\n","Installing collected packages: numpy, scipy, simpful, miniful, fst-pso, pyfume, FuzzyTM, gensim\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","thinc 8.3.6 requires numpy<3.0.0,>=2.0.0, but you have numpy 1.26.4 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed FuzzyTM-2.0.9 fst-pso-1.8.1 gensim-4.3.0 miniful-0.0.6 numpy-1.26.4 pyfume-0.3.1 scipy-1.11.4 simpful-2.12.0\n","Please restart the runtime now (Runtime -> Restart Runtime) before continuing.\n"]}]},{"cell_type":"code","source":["!pip install scipy==1.9.3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":637},"id":"-xXdHL6V55tl","executionInfo":{"status":"ok","timestamp":1744778554089,"user_tz":-330,"elapsed":19189,"user":{"displayName":"SANGA AKHILANANDA TEJA","userId":"15554438447735276230"}},"outputId":"48974098-666c-496f-9167-e08c8f193f19"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting scipy==1.9.3\n","  Downloading scipy-1.9.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (58 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/58.4 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.4/58.4 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting numpy<1.26.0,>=1.18.5 (from scipy==1.9.3)\n","  Downloading numpy-1.25.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.6 kB)\n","Downloading scipy-1.9.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (33.4 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m33.4/33.4 MB\u001b[0m \u001b[31m36.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading numpy-1.25.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (18.2 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m18.2/18.2 MB\u001b[0m \u001b[31m49.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: numpy, scipy\n","  Attempting uninstall: numpy\n","    Found existing installation: numpy 1.26.4\n","    Uninstalling numpy-1.26.4:\n","      Successfully uninstalled numpy-1.26.4\n","  Attempting uninstall: scipy\n","    Found existing installation: scipy 1.11.4\n","    Uninstalling scipy-1.11.4:\n","      Successfully uninstalled scipy-1.11.4\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","albumentations 2.0.5 requires scipy>=1.10.0, but you have scipy 1.9.3 which is incompatible.\n","tensorflow 2.18.0 requires numpy<2.1.0,>=1.26.0, but you have numpy 1.25.2 which is incompatible.\n","cvxpy 1.6.4 requires scipy>=1.11.0, but you have scipy 1.9.3 which is incompatible.\n","jax 0.5.2 requires scipy>=1.11.1, but you have scipy 1.9.3 which is incompatible.\n","scikit-image 0.25.2 requires scipy>=1.11.4, but you have scipy 1.9.3 which is incompatible.\n","blosc2 3.3.0 requires numpy>=1.26, but you have numpy 1.25.2 which is incompatible.\n","thinc 8.3.6 requires numpy<3.0.0,>=2.0.0, but you have numpy 1.25.2 which is incompatible.\n","jaxlib 0.5.1 requires scipy>=1.11.1, but you have scipy 1.9.3 which is incompatible.\n","imbalanced-learn 0.13.0 requires scipy<2,>=1.10.1, but you have scipy 1.9.3 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed numpy-1.25.2 scipy-1.9.3\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["numpy"]},"id":"0f393504f68e41e58fd0839a448069b4"}},"metadata":{}}]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":14774,"status":"ok","timestamp":1744778583577,"user":{"displayName":"SANGA AKHILANANDA TEJA","userId":"15554438447735276230"},"user_tz":-330},"id":"6DQR8OrmfB5B"},"outputs":[],"source":["import os\n","import re\n","import zipfile\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from gensim.models import Word2Vec\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.utils.class_weight import compute_class_weight\n","\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout\n"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":77,"status":"ok","timestamp":1744778648986,"user":{"displayName":"SANGA AKHILANANDA TEJA","userId":"15554438447735276230"},"user_tz":-330},"id":"1W0da0RYd2RZ","outputId":"5b429cb4-eab3-4e0f-e927-09a871610017"},"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset extracted.\n"]}],"source":["zip_path = 'covid_tweets.zip'\n","extract_path = 'tweets_data'\n","os.makedirs(extract_path, exist_ok=True)\n","\n","with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n","    zip_ref.extractall(extract_path)\n","\n","print(\"Dataset extracted.\")\n"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":37,"status":"ok","timestamp":1744779146004,"user":{"displayName":"SANGA AKHILANANDA TEJA","userId":"15554438447735276230"},"user_tz":-330},"id":"CZskIoGkfNfL","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a1062623-043d-413d-bbc6-4cc55e38f02c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Total tweets: 321\n","Classes found: {0, 1, 2, 3, 4, 5}\n"]}],"source":["import os\n","\n","# Set the path to the folder with tweet files\n","data_dir = 'tweets_data/covid_tweets'\n","\n","# Create a dictionary to map month names to numeric labels\n","label_map = {\n","    'January': 0,\n","    'February': 1,\n","    'March': 2,\n","    'April': 3,\n","    'May': 4,\n","    'December': 5\n","}\n","\n","texts = []\n","labels = []\n","\n","# Read and label tweets\n","for filename in os.listdir(data_dir):\n","    if filename.endswith('.txt'):\n","        month = filename.split('_')[1].split('.')[0]  # Extract \"January\", etc.\n","        label = label_map.get(month, None)\n","        if label is not None:\n","            with open(os.path.join(data_dir, filename), 'r', encoding='utf-8') as f:\n","                for line in f:\n","                    tweet = line.strip()\n","                    if tweet:  # Skip empty lines\n","                        texts.append(tweet)\n","                        labels.append(label)\n","\n","print(f\"Total tweets: {len(texts)}\")\n","print(f\"Classes found: {set(labels)}\")\n"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":50,"status":"ok","timestamp":1744779185003,"user":{"displayName":"SANGA AKHILANANDA TEJA","userId":"15554438447735276230"},"user_tz":-330},"id":"ppjiVgdtfSko"},"outputs":[],"source":["from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","vocab_size = 10000\n","max_length = 50\n","oov_token = \"<OOV>\"\n","\n","tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_token)\n","tokenizer.fit_on_texts(texts)\n","sequences = tokenizer.texts_to_sequences(texts)\n","padded_sequences = pad_sequences(sequences, maxlen=max_length, padding='post', truncating='post')\n"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1744779191287,"user":{"displayName":"SANGA AKHILANANDA TEJA","userId":"15554438447735276230"},"user_tz":-330},"id":"Y1-BAXj9fUz_"},"outputs":[],"source":["import numpy as np\n","from sklearn.model_selection import train_test_split\n","\n","labels = np.array(labels)\n","\n","X_train, X_val, y_train, y_val = train_test_split(\n","    padded_sequences, labels, test_size=0.2, random_state=42, stratify=labels\n",")\n"]},{"cell_type":"code","execution_count":12,"metadata":{"executionInfo":{"elapsed":59,"status":"ok","timestamp":1744779199797,"user":{"displayName":"SANGA AKHILANANDA TEJA","userId":"15554438447735276230"},"user_tz":-330},"id":"S4HRLPh9fWbf","colab":{"base_uri":"https://localhost:8080/","height":328},"outputId":"a8034fe8-f3cb-4169-ad56-cbc95c29915e"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"sequential_1\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n","│ embedding_1 (\u001b[38;5;33mEmbedding\u001b[0m)         │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ global_average_pooling1d        │ ?                      │             \u001b[38;5;34m0\u001b[0m │\n","│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)        │                        │               │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n","└─────────────────────────────────┴────────────────────────┴───────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n","│ embedding_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ global_average_pooling1d        │ ?                      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n","└─────────────────────────────────┴────────────────────────┴───────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}}],"source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Embedding, GlobalAveragePooling1D, Dense\n","\n","embedding_dim = 16\n","\n","model = Sequential([\n","    Embedding(vocab_size, embedding_dim, input_length=max_length),\n","    GlobalAveragePooling1D(),\n","    Dense(24, activation='relu'),\n","    Dense(6, activation='softmax')  # 6 output classes for 6 months\n","])\n","\n","model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","model.summary()\n"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8rCUZ_5Sbv6V","executionInfo":{"status":"ok","timestamp":1744779211427,"user_tz":-330,"elapsed":4237,"user":{"displayName":"SANGA AKHILANANDA TEJA","userId":"15554438447735276230"}},"outputId":"17da7783-6cb0-468f-989c-d02d3692e0a7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","\u001b[1m8/8\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 67ms/step - accuracy: 0.1343 - loss: 1.7933 - val_accuracy: 0.1846 - val_loss: 1.7910\n","Epoch 2/10\n","\u001b[1m8/8\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.1619 - loss: 1.7907 - val_accuracy: 0.2000 - val_loss: 1.7896\n","Epoch 3/10\n","\u001b[1m8/8\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.2374 - loss: 1.7886 - val_accuracy: 0.2000 - val_loss: 1.7889\n","Epoch 4/10\n","\u001b[1m8/8\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - accuracy: 0.2148 - loss: 1.7884 - val_accuracy: 0.2000 - val_loss: 1.7880\n","Epoch 5/10\n","\u001b[1m8/8\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - accuracy: 0.1989 - loss: 1.7868 - val_accuracy: 0.2000 - val_loss: 1.7871\n","Epoch 6/10\n","\u001b[1m8/8\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step - accuracy: 0.2153 - loss: 1.7815 - val_accuracy: 0.2000 - val_loss: 1.7863\n","Epoch 7/10\n","\u001b[1m8/8\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.2081 - loss: 1.7835 - val_accuracy: 0.2000 - val_loss: 1.7858\n","Epoch 8/10\n","\u001b[1m8/8\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.2000 - loss: 1.7814 - val_accuracy: 0.2000 - val_loss: 1.7851\n","Epoch 9/10\n","\u001b[1m8/8\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.1970 - loss: 1.7818 - val_accuracy: 0.2000 - val_loss: 1.7844\n","Epoch 10/10\n","\u001b[1m8/8\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step - accuracy: 0.1942 - loss: 1.7809 - val_accuracy: 0.2000 - val_loss: 1.7839\n"]}],"source":["history = model.fit(\n","    X_train, y_train,\n","    epochs=10,\n","    validation_data=(X_val, y_val),\n","    verbose=1\n",")\n"]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","plt.plot(history.history['accuracy'], label='Train Acc')\n","plt.plot(history.history['val_accuracy'], label='Val Acc')\n","plt.title('Accuracy Over Epochs')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"Kv42YeGiIKs_","executionInfo":{"status":"ok","timestamp":1744779223625,"user_tz":-330,"elapsed":593,"user":{"displayName":"SANGA AKHILANANDA TEJA","userId":"15554438447735276230"}},"outputId":"fd6f16c3-134a-4c4b-bbd7-0e618f23ed0d"},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["y_pred_probs = model.predict(X_test)\n","y_pred = (y_pred_probs > 0.5).astype(int).flatten()\n","\n","print(\"Classification Report:\")\n","print(classification_report(y_test, y_pred, target_names=[\"Not COVID\", \"COVID\"]))\n","\n","cm = confusion_matrix(y_test, y_pred)\n","sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=[\"Not COVID\", \"COVID\"], yticklabels=[\"Not COVID\", \"COVID\"])\n","plt.title(\"Confusion Matrix\")\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"Actual\")\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":787},"id":"oANUdugRMXF2","executionInfo":{"status":"ok","timestamp":1744733046927,"user_tz":-330,"elapsed":4432,"user":{"displayName":"SANGA AKHILANANDA TEJA","userId":"15554438447735276230"}},"outputId":"24596a83-1397-4ce6-9c06-d41771b8d697"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2s/step\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","   Not COVID       0.97      1.00      0.98        61\n","       COVID       0.00      0.00      0.00         2\n","\n","    accuracy                           0.97        63\n","   macro avg       0.48      0.50      0.49        63\n","weighted avg       0.94      0.97      0.95        63\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hnc-fVm_gK5F","executionInfo":{"status":"ok","timestamp":1744733120548,"user_tz":-330,"elapsed":41,"user":{"displayName":"SANGA AKHILANANDA TEJA","userId":"15554438447735276230"}},"outputId":"3867e407-dd21-4f4f-cf5b-5852e68130be"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Sentiment Analysis for Tweets_December.txt:\n","Sentiments: ['Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Negative', 'Negative', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Negative', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral']\n","Positive Ratio: 0.00, Negative Ratio: 0.05, Neutral Ratio: 0.95\n","\n","Sentiment Analysis for Tweets_March.txt:\n","Sentiments: ['Neutral', 'Neutral', 'Neutral', 'Neutral', 'Positive', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral']\n","Positive Ratio: 0.02, Negative Ratio: 0.00, Neutral Ratio: 0.98\n","\n","Sentiment Analysis for Tweets_January.txt:\n","Sentiments: ['Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Positive', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral']\n","Positive Ratio: 0.02, Negative Ratio: 0.00, Neutral Ratio: 0.98\n","\n","Sentiment Analysis for Tweets_April.txt:\n","Sentiments: ['Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Negative', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Positive']\n","Positive Ratio: 0.02, Negative Ratio: 0.02, Neutral Ratio: 0.96\n","\n","Sentiment Analysis for Tweets_February.txt:\n","Sentiments: ['Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Positive', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral']\n","Positive Ratio: 0.02, Negative Ratio: 0.00, Neutral Ratio: 0.98\n","\n","Sentiment Analysis for Tweets_May.txt:\n","Sentiments: ['Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Positive', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral']\n","Positive Ratio: 0.02, Negative Ratio: 0.00, Neutral Ratio: 0.98\n","\n","Overall Sentiment Counts:\n","{'Positive': 5, 'Negative': 4, 'Neutral': 303}\n"]}],"source":["# Simple sentiment analysis based on keywords\n","def analyze_sentiment(text):\n","    positive_words = {'good', 'great', 'happy', 'love', 'hope'}\n","    negative_words = {'bad', 'sad', 'hate', 'fear', 'death'}\n","    positive = sum(1 for word in text.lower().split() if word in positive_words)\n","    negative = sum(1 for word in text.lower().split() if word in negative_words)\n","    if positive > negative:\n","        return 'Positive'\n","    elif negative > positive:\n","        return 'Negative'\n","    else:\n","        return 'Neutral'\n","\n","# Analyze sentiment for each file\n","folder_path = 'tweets_data/covid_tweets'\n","sentiment_counts = {'Positive': 0, 'Negative': 0, 'Neutral': 0}\n","\n","for file_name in os.listdir(folder_path):\n","    if file_name.endswith('.txt'):\n","        file_path = os.path.join(folder_path, file_name)\n","        print(f\"\\nSentiment Analysis for {file_name}:\")\n","        with open(file_path, 'r', encoding='utf-8') as file:\n","            file_sentiments = []\n","            for line in file:\n","                text = preprocess_text(line.strip())\n","                if text:\n","                    sentiment = analyze_sentiment(text)\n","                    file_sentiments.append(sentiment)\n","                    sentiment_counts[sentiment] += 1\n","            print(f\"Sentiments: {file_sentiments[:130]}\")\n","            positive_ratio = file_sentiments.count('Positive') / len(file_sentiments) if file_sentiments else 0\n","            negative_ratio = file_sentiments.count('Negative') / len(file_sentiments) if file_sentiments else 0\n","            neutral_ratio = file_sentiments.count('Neutral') / len(file_sentiments) if file_sentiments else 0\n","            print(f\"Positive Ratio: {positive_ratio:.2f}, Negative Ratio: {negative_ratio:.2f}, Neutral Ratio: {neutral_ratio:.2f}\")\n","\n","print(\"\\nOverall Sentiment Counts:\")\n","print(sentiment_counts)"]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOlzxMdvf61jMyvAa8gknDp"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}